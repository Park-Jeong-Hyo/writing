ecma 정보통신 국제표준화기구
ecma-262 언어규격 -> ecmascript -> 자바스크립트->es6

es6:
library: jquery, react
fraimework: angularjs, vuejs

vanilla javascript: 순수 자바스크립트 코드(라이브러리나, 프레임워크를 사용하지않고 개발하는 것)

-- 문법

1. 변수선언 : let const var
		let,const: 변수의 생명주기-블럭레벨
		var: 1. 변수의 생명주기-함수레벨
			 2. 재정의 가능
			 3. web환경에서 전역변수로 선언되면 전역 객체(window, globalThis)의 프로퍼티로 추가된다.
		
2.자료형 number string boolean null undefined symbol
	자료형 확인: typeof(내장함수)
3. 연산자 산술 비교 논리(truthy, falsy) 대입, 삼항연산자, 증감연산자, (),부호연산자
4. 제어문(분기 반복)
	분기: if, switch
	반복: for, for~in(객체의 프로퍼티탐색), for~of(이터러블 객체), while, do~while
5. 배열: []: 어떤 타입의 요소던지 배열안에 들어갈 수 있다., new array() 두가지 방식으로 생성 가능
	배열요소는 자료형에 상관이 없다.(자바랑 다른 점) 다른타입이 요소로 올 수 있다. 
	ex) [10, "name, "age", ['hobby', 30, {"name:": "홍길동", "age": 30}], function(x,y) {return x + y}]
6. 함수: 
	함수선언문: function f(매개변수) {실행문}
			web환경에서 선언되면 전역 객체(window, globalThis)의 프로퍼티로 추가된다.
	함수표현식: const f = function(변수) {실행문}
	화살표함수: 함수 표현식을 간단히 표현한 함수
			const f = (매개변수)=>{실행문}
7. 객체: {프로퍼티,....]
	정의: 속성(데이터,상태):명사, 행위(메소드):동사 
	1. 데이터 객체(1회성객체): {}
	2. 행성자 함수: 틀을 만들고, 그것을 매개로 해서 여러 객체를 만들어 낼 수 있다.
	3. class 문법
	객체 설계방법:
		1. 생성자 함수: 함수 선언문
		2. class 문법
	객체
8. 표준 라이브러리(or 내장객체): mdn에 자세하게 나와있다, api를 보고 혼자서 찾을 수 있어야 한다.
	ex) string, number, math, date, array, set, map

9. web 환경
	- 전역 객체(window, globalThis)
	- 전역 객체 프로퍼티 내에 표준라이브러리, web api 가 포함되어 있다.


web api
1.  dom: 웹환경에서 전역객체(window,globalThis)/ window.document, globalThis.document; 전역객체는 생략이 가능하다.
	Document Object Model html태그가 메모리상에 로딩되면서 자바스크립트의 객체(노드)로 변환된다.
	그런 노드들이 트리 모양으로 메모리에 업로드된다. 그게 dom tree이다. 엘리먼트별, 텍스트별, 어트리뷰트별로 바뀐다. dom tree의 변경-> 문서구조의 변경
2. 이벤트 프로그래밍: 이벤트 타겟, 이벤트 객체, 이벤트 리스너, 이벤트 핸들러
3. c/s 통신 프로그래밍:xmlhttprequest fetch, await

이벤트 프로그래밍

1. 이벤트 타겟(=소스) : 이벤트가 발생되는 지점(element)
2. 이벤트 객체: 이벤트가 발생되면 브라우저가 이벤트 객체를 생성한다. 이벤트 객체는 이벤트관련 정보를 가짐.
3. 이벤트 리스너(= 이벤트 핸들러): 이벤트가 발생시 처리할 로직
4. 캡처링 단계: 이벤트 전파과정
	1. 캡처링 단계
	2. 버블링 단계

console.dir(): 콘솔상에서 프로퍼티명을 확인할 수 있는 함수

전역객체: window, globalThis 둘다 같은 기능을 가진다.

window.document;

쿼리 셀렉터로 타겟팅을 한다.

변수.style.css속성으로 타겟팅한 요소에 css스타일을 줄 수 있다.

html의 구조를 객체화해서 dom tree를 만든다. 이 때 dom api가 접근을 가능하게 한다.?
dom api를 통해서 html 요소에 접근, 컨트롤을 할 수 있다.
dom의 구조: window>document>element

dom tree가 만들어지고 eventtaget>node>element>htmlelement 아래로는 html의 태그가 엘리먼트로 존재한다.

Object.prototype.toString.call($btn);

.classList 대상의 클래스 리스트를 배열의 형식으로 가져온다

.classList.add()클래스를 추가함
.setAttribute() 속성을 추가 ex)setAttribute('id', 'btn1') 이렇게 하면 id="btn1"이 추가된다.

엘리먼트를 만드는 api: document.createElement
const $p = document.createElement('p');

타입을 보는 법: Object.prototype.toString.call(타입을 보고싶은 대상);

appendChild 부모태그 하위태그에 추가
removeChild 하위태그에 있던 걸 삭제

input태그로 입력한 값은 value;
document.querySelector('#msg').value;

addeventListener은 eventtager에 있는 메소드.

Math.floor(Math.random()*10);