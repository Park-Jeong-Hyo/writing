controller 는 서비스레이어를 참조, 서비스레이어는 dao를 참조

dao: database access object

이미지 참조. Spring mvc(model, view, controller)의 구조
1. 클라이언트가 요청하면 dispatcher servlet이 요청을 받는다

2. 노란색으로 표시되어 있는 네모들은 스프링프레임워크가 제공한다.

3. Handler Mapping에서 URL, 메서드를 매핑해서 컨트롤러에 보낸다

4. svc에서 실제 연산이 이루어진다.

5. 데이터베이스관련 부분의 연산이 필요할 경우 dao까지 간다.

6. 최종적으로 svc에서 데이터가 만들어지고

7. 이걸 클라이언트로 보낼 때 세가지의 형태로 보낼 수 있다. 
	(
		일반 텍스트, 
		JSON(XML): 데이터만 전송하는 방식, 
		html: 데이터와 구조가 같이 가는 방식, html의 구조까지 다 렌더링을 한다.
	)
	
* 서버에서는 thmeleaf를 통해서 동적인 화면을 구현한다.

* 프론트에서는 자바스크립트를 사용

*요청메소드 보내는 4가지 방법
	url 경로상에 데이터에 넣는 방식

	쿼리스트링으로 전달하는 방식

	요청헤더에 넣는 방식

	요청메세지 바디에 넣는 방식
*html은 요청방식을 두가지밖에 사용하지 못한다. 
	html get방식의 대표: a태그
		 post방식의 대표: form태그

*브라우저에서 url경로상에 넣는 건 전부다 get방식이다.
	브라우저에서 url을 요청하는 것은 데이터를 url로 전달하는 방법 중의 하나이다.
	post방식으로는 브라우저에서 url경로상에 넣어도 응답이 오지 않는다.

* 등록, 수정 조회등을 할때 화면을 다르게 구성해야한다. 비슷하다고 해서 하나로 퉁쳐버리면
	분기문이 자꾸 생겨서 복잡하게 된다.

* postman은 http프로토콜에 맞춰서 모든지 할수 있는 툴을 제공한다.

* spring 관련: 정적 리소스는 static에 오고, 동적 리소스는 template에 온다.

* th로 시작하는 그런게 thymeleaf