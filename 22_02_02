어떤 관점을 취하느냐에 따라 프레임워크로 정의될 수도 있고 라이브러리로 정의 될 수도 있다.

 프레임워크 라이브러리의 차이
	라이브러리는 개발자가 완성코자하는 애플리케이션에 부품처럼 가져다 사용하는 방식 메인이 개발자
	프레임워크는 기본골격을 가져와서 개발자가 맞춰 가며 개발하는 방식

1. 프레임워크?
	틀 구조
	장점: 품질보증, 생산성 증가
	단점: 구조를 파악(학습곡선)
	예) 완제품 기성복
	소프트웨어) css(tailwild, bootstrap...) 백엔드(spring, django), 프런트엔드(vue, angularjs, react...)
2. 라이브러리
	장점: 개발자가 주도적으로 개발가능
	단점: 개발 역량에 따른 품질차이 발생, 생산성 떨어질 수 있음
	예) 조립컴퓨터, 맞춤복
	소프트웨어) 백엔드(lombok...) 프런트엔드(react...
3. 아키텍처
	핵심 구성요소, 핵심 구성요소간의 관계
	
	ex) erd, uml
	
 자바스크립트
 자바스크립트에서 객체는 중괄호를 사용한다.
 
 객체: 속성, 행위
 개념정의
class Person {
	stirng name;
	int age;

	public void sleep() {}
	public void eat() {}
}

Person person = new Person();
person.name = "홍길동";
person.age = 30;
person.sleep();

인스턴스화 객체화, 자바에서는 클래스를 만들고 인스턴스화를 통해서 객체를 만든다면
{} : 객체
[] : 배열
자바스크립트에서는 이렇게 한다.
클래스를 생성할 수도 있지만 그냥 한번만 쓴다면 이런 식으로 바로 생성이 가능하다.
name, age는 키
"홍길동", 30은 값이다.
const person = {
	name: "홍길동"
	age: 30
	addr : {
		national :"한국"
		region: "울산"
	}
	hobby : ["등산", "골프", "수영"]
}

flowbite modal
button의 target값과 main의 id값을 연결
tailwindcss는 클래스만 가져가서 css를 만들지 않고 바로 사용할 수 있게 했음
