고차함수란?
	1. 함수를 매개값으로 받는 함수
	2. 함수를 반환하는 함수

콜백함수(보조함수란)?
	고차함수에 매개값으로 전달되는 함수

구조분해(destructuring)? 배열의 요소, 객체 리터럴의 프로퍼티를 개별 변수에 저장하고자 할 때 사용하는 문법
	const [x,y] = [10,20];
	const {name: a, age: b} = {name:'홍길동', age:30};

전개연산자(spread) 이터러블 객체의 요소를 목록으로 전환하는 문법
	...이터러블 객체

이터러블(iterable) 객체란? 이터러블 규약을 따르는 객체
	for ~ of 이터러블 객체
	이터러블 객체인지 아닌지 판단하는 방법
	Symbol.iterator메소드를 가지고 있는 객체
		반환값: 이터레이터 객체 {next() return {value:?, }, done:[true|false]}
	
	ex) 배열, 문자열, set, map, NodeList, htmlCollection,...
	
팀별 과제 수행
1. 배열의 고차함수 중 map, filter, reduce, forEach, sort, find의
용도 매개값 반환값의 의미를 설명하시오 그리고 각각의 예제소스를 제시하시오.

*reduce: 배열 요소를 순회하면서 단일값으로 축소하고자 하는 용도
[1,2,3,4]reduce(acc,curr,curridx,arr)=> {return curr + acc}, initialValue
case1) initialValue가 없을 때
1회: acc = 1, curr = 2, currIdx = 1, [1,2,3,4]
2회: acc = 3, curr = 3, currIdx = 2, [1,2,3,4]
3회: acc = 6, curr = 4, currIdx = 3, [1,2,3,4]
최종: 10
누적 로직의 결과값이 순회할 때 acc에 계속 온다. 
case2) initialValue가 있을 때
1회: acc = 0, curr = 1, currIdx = 0, [1,2,3,4]
2회: acc = 1, curr = 2, currIdx = 1, [1,2,3,4]
3회: acc = 3, curr = 3, currIdx = 2, [1,2,3,4]
4회: acc = 6, curr = 4, currIdx = 3, [1,2,3,4]
최종: 10
Array.prototype.map((ele,idx,arr) => 처리 로직);
: 처리하고자 하는 배열의 각 요소를 순환하면서 처리로직에 따라서 처리를 하고, 새로운 배열을 반환한다.
반환값: 배열
forEach와의 차이점: 비슷하나, 반환값 유무의 차이점이 있다.
ex)
const arr = [1,2,3,4,5]
const result = arr.map(ele => ele * 2);
console.log(result) //[2,4,6,8,10]

Array.prototype.filter((ele,idx,arr) => 처리 로직);
: 처리하고자 하는 배열의 각 요소를 순환하면서, 처리 로직과 일치하는 조건의 요소만을 골라서 새로운 배열로 반환한다.
반환값: 배열
ex)
const arr = [1,2,3,4,5]
const result = arr.filter(ele => ele > 3)
console.log(result) // [4,5]

Array.prototype.reduce((acc,curr,idx,arr) => 처리로직,최초값(일반적으로 0);
:처리하고자 하는 배열의 각 요소를 순환하면서, 처리 로직에 따라서 누적 값과 현재 값을 처리함.
반환값: 값
ex)
const arr = [1,2,3,4,5]
const result = arr.reduce((acc,curr) => acc + curr, 0)
console.log(result) // 15

Array.prototype.forEach((ele,idx,arr) => 처리로직);
:처리하고자 하는 배열의 각 요소를 순환하면서 처리로직에 따라서 처리 한다.
반환값: 없음;
ex)
const arr = [1,2,3,4,5]
function f(array) {
    const result = [];
    array.forEach(ele=> result.push(ele * 3));// forEach는 반환값이 없으므로 이렇게 해야한다.
    return result;
}
console.log(f(arr))// [3,6,9,12,15]

Array.prototype.sort(비교)
:배열과 객체를 정렬함
1. 배열.sort() 오름차순으로 정렬된 배열 반환
2. 배열.sort().reverse() 내림차순으로 정렬된 배열 반환
3. 객체.sort((a,b) => a - b) 오름차순으로 정렬된 객체 리터럴 반환
4. 객체.sort((a,b) => b - a) 내림차순으로 정렬된 객체 리터럴 반환
ex)
const arr = [3,4,2,1,5]
console.log(arr.sort()) // [1,2,3,4,5]
console.log(arr.sort().reverse())//[5,4,3,2,1]
const person = [{age:50},{age:30}, {age:25}, {age:60}];
console.log(person.sort((a,b) => a.age - b.age))//[ { age: 25 }, { age: 30 }, { age: 50 }, { age: 60 } ]
console.log(person.sort((a,b) => b.age - a.age))//[ { age: 60 }, { age: 50 }, { age: 30 }, { age: 25 } ]

Array.prototype.find((ele,idx,arr) => 처리로직)
:처리로직의 조건에 일치하는 최초의 값을 반환
반환값: 값
ex)
const arr = [3,4,2,1,5]
console.log(arr.find(ele => ele > 3)); //4