csr: 클라이언트 사이드 렌더링 html 화면을 자바스크립트를 사용해 브라우저(클라이언트)에서 동적으로 생성
	클라이언트에서 화면을 렌더링

ssr: 서버 사이드 렌더링 html 화면을 서버에서 만들어서 클라이언트에 전달
	서버에서 화면을 렌더링
ajax

was: web application server

http: hyper text transfer protocol

data transfer object: DTO

data access object: DAO (인터페이스) -> impl(구현)

jdbcTemplate: java에서 sql을 사용하기 위한 api

lombok라이브러리(자바): 게터세터가 필요없어짐

url을 보고 뭘 요청하는지 파악

single page application: crud를 한 페이지 내에서 처리함

csr 데이터만 가져오기 때문에 화면의 전환이 없었지만

ssr은 화면을 불러오기 때문에 화면의 전환이 생긴다.

http request: url로 필요한 걸 요청
요청라인: http method(get,post,put(없으면 생성 있으면 대체),delete,patch(리소스 부분 변경))//request url(경로)//http version
	? ___&___(이런 형식도 있음.시작? 키=값 구분자& 쿼리 스트링? 이라고 한다. 키 밸류 형태 경량급의 데이터, url상에서 보인다) 보안이 중요할 경우 이 형식은 사용되지 않는다.
	
요청 헤더: 키 벨류 형식, 메타데이터
메세지 바디: 실제 전달해야될 데이터

서버가 요구하는 것: 메서드, url, 페이로드

http response: url에 맞춰서 어떤 정보를 보낼지 매칭이 다 되어있다. 없으면 401등의 오류를 보낸다.
상태라인: http version / 2번대(성공),300번대(실패) 4번대(클라이언트오류),5백번대(서버오류).. 등등 / ok
응답해더: 키벨류형식 메타데이터
메세지바디: http 형태로 보냄


http requset, http response를 js api를 통해서 제어가 가능

html 태그는 get, post 2가지만 지원한다.

예)http api 요청 예
등록: post, 목록: get, 조회: get, 수정: patch, 삭제: delete

url:포트 다음부터 루트

타임리프: ssr때 사용

was: web application service

ssr: server side rendering

csr: client side rendering

html request 요청 데이터
text, json/xml, html

http request는 자바스크립트로도(xmlHttpRequest), html 태그로도(a href) 만들 수 있다.

form 태그 method(get,post두가지만 지원, 자바스크립트는 더 많이(get, post, patch, delete... 등) 지원한다.) action에 url이 들어간다.

input 엘리먼트의 사용자가 입력한 값은 메세지 본문에 들어간다.

url에 쿼리스트링으로 요구사항을 보내면 많이 못쓴다. 많이 쓰기위해서는 메세지 바디에 들어가야 된다.

상태라인, 응답해더, 공백라인, 메세지 바디

http response

상태라인, 응답헤더, 공백라인 메세지바디

상태라인: http version / reosponse messagecode(200번대 성공, 300~500번대 실패) response message code text

서버에서 다 처리한 다음, 클라이언트에 정보를 전달하는 구조

메세지 바디에는 일반 텍스트, json xml, html 같은게 온다.

form태그의 method는 get과 post 두가지만 지원한다.

Uniform/universal Resourse locator: url

url 경로명을 만들 때 규칙

보통은 명사를 사용한다.

postman은 html 요청메세지를 만들고, html response 메세지를 볼 수 있는 툴이다.

데이터를 was로 넘기기 전에 유효성 체크를 해야한다.